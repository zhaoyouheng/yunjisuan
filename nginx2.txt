    
NGINX(engine X)

             官网:http://nginx.org/(示例配置文件)


          Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。
 
               特点：是占有内存少，并发能力强,（能够支持高达 50,000 个并发连接数的响应）
                   稳定、丰富的功能集、示例配置文件和低系统资源的消耗
                   其将源代码以类BSD许可证的形式发布
              开发模型：epoll and kqueue。
            
          Supported Application Languages（支持的应用程序语言）
        
               Python
               PHP
               Go
               Perl
               Ruby
               JavaScript/Node.js (coming soon)
               Java (coming soon)
     
使用源码包安装nginx软件包:
 
              yum -y install gcc pcre-devel openssl-devel        //安装依赖包

              useradd -s /sbin/nologin nginx                     //创建nginx用户默认（nobody）

              tar  -xf   nginx-1.10.3.tar.gz
                  cd  nginx-1.10.3
                  ./configure   \
                > --prefix=/usr/local/nginx   \                  //指定安装路径
                > --user=nginx   \                               //指定用户
                > --group=nginx  \                               //指定组
                > --with-http_ssl_module                         //开启SSL加密功能
             
                  make && make install                           //编译并安装

           nginx命令的用法


                  /usr/local/nginx/sbin/nginx                    //启动服务
                  /usr/local/nginx/sbin/nginx -s stop            //关闭服务
                  /usr/local/nginx/sbin/nginx -s reload          //重新加载配置文件
                  /usr/local/nginx/sbin/nginx –V                 //查看软件信息
                   ln -s /usr/local/nginx/sbin/nginx /sbin/      //制作软链接方便后期使用
                
                netstat命令可以查看系统中启动的端口信息，该命令常用选项如下：

                -a显示所有端口的信息
                -n以数字格式显示端口号
                -t显示TCP连接的端口
                -u显示UDP连接的端口
                -l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
                -p显示监听端口的服务名称是什么（也就是程序名称）

                nginx服务默认通过TCP 80端口监听客户端请求：

                netstat  -anptu  |  grep nginx

                tcp        0        0 0.0.0.0:80        0.0.0.0:*        LISTEN        10441/nginx

           设置防火墙与SELinux

                  firewall-cmd --set-default-zone=trusted

                  setenforce 0
           测试首页文件
                    
                       curl http://192.168.4.5
                          
                          Welcome to nginx!


升级Nginx服务器：
  
            编译新版本nginx软件

                  tar  -zxvf   nginx-1.12.2.tar.gz
                  
                  cd nginx-1.12.2

                  ./configure   \
                  > --prefix=/usr/local/nginx   \ 
                  > --user=nginx   \ 
                  > --group=nginx  \ 
                  > --with-http_ssl_module
                 
                  make            

            备份老的nginx主程序，并使用编译好的新版本nginx替换老版本

                  mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginxold   //备份旧版本

                  cp objs/nginx  /usr/local/nginx/sbin/                           //拷贝新版本

                  make upgrade                                                    //升级
                  /usr/local/nginx/sbin/nginx -t

                  /usr/local/nginx/sbin/nginx –v                                  //查看版本



配置nginx，实现Web页面需要进行用户认证：


       模板配置文件框架如下：
                vim  /usr/local/nginx/conf/nginx.conf
                全局配置（用户名,日志,进程)
                http{
                    server{
                        listen 80;
                        server_name localhost;
                        root html;
                       }
                       server{
                        listen 80;
                        server_name www.xyz.com;
                        root www;
                       }
                }
                            
      修改Nginx配置文件:
                
              1）修改/usr/local/nginx/conf/nginx.conf

                 vim /usr/local/nginx/conf/nginx.conf
                    .. ..
                 server {
                        listen       80;
                        server_name  localhost;
                        auth_basic "Input Password:";                        //认证提示符
                        auth_basic_user_file "/usr/local/nginx/pass";        //认证密码文件
                        location / {
                            root   html;
                            index  index.html index.htm;
                        }
                  }
                2）生成密码文件，创建用户及密码

                使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools。

                              yum -y install  httpd-tools                                
                              htpasswd -c /usr/local/nginx/pass   tom        //创建密码文件 
                              htpasswd  /usr/local/nginx/pass   jerry        //追加用户，不使用-c选项

                3）重启Nginx服务

                              /usr/local/nginx/sbin/nginx -s reload          //重新加载配置文件    

                4) 客户端测试
                
                              firefox http://192.168.4.5                     //输入密码后可以访问



基于域名的虚拟主机:





                1）修改Nginx服务配置，添加相关虚拟主机配置如下

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                server {
                        listen       80;                                      //端口
                        server_name  www.a.com;                               //域名
                location / {
                            root   html;                                      //指定网站根路径
                            index  index.html index.htm;
                       }
                       
                }
                … …
                server {
                        listen  80;                                           //端口
                        server_name  www.b.com;                               //域名
                location / { 
                root   www;                                                   //指定网站根路径
                index  index.html index.htm;
                }
                }

                2）创建网站根目录及对应首页文件

                   mkdir /usr/local/nginx/www
                   echo "www" > /usr/local/nginx/www/index.html
                
                3）重启nginx服务
                    /usr/local/nginx/sbin/nginx -s reload

                4) 测试                 

                   firefox http://www.a.com           
                   firefox http://www.b.com           
       
         扩展其他虚拟主机：
                1.基于端口的虚拟主机（参考模板）
                server {
                        listen       8080;                      //端口
                        server_name  web1.example.com;          //域名
                        ......
                }
                    server {
                        listen       8000;
                        server_name  web1.example.com;
                      .......
                }
                2.基于IP的虚拟主机（参考模板）
                server {
                        listen       192.168.0.1:80;            //端口
                        server_name  web1.example.com;          //域名
                  ... ...
                }
                    server {
                        listen       192.168.0.2:80;
                        server_name  web1.example.com;
                ... ...
                }


SSL虚拟主机



                 源码安装Nginx时必须使用--with-http_ssl_module参数
                 对需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。

                      加密算法一般分为对称算法、非对称算法、信息摘要。
                      对称算法有：AES、DES，主要应用在单机数据加密。
                      非对称算法有：RSA、DSA，主要应用在网络数据加密。
                      信息摘要：MD5、sha256，主要应用在数据完整性校验、数据秒传等。
                
          配置SSL虚拟主机

           1）生成私钥与证书

                cd /usr/local/nginx/conf
                openssl genrsa > cert.key                            //生成私钥
                openssl req -new -x509 -key cert.key > cert.pem      //生成证书

           2）修改Nginx配置文件，设置加密网站的虚拟主机

                vim  /usr/local/nginx/conf/nginx.conf
                … …    
                server {
                        listen       443 ssl;
                        server_name            www.c.com;
                        ssl_certificate      cert.pem;         #这里是证书文件
                        ssl_certificate_key  cert.key;         #这里是私钥文件
                        ssl_session_cache    shared:SSL:1m;
                        ssl_session_timeout  5m;
                        ssl_ciphers  HIGH:!aNULL:!MD5;
                        ssl_prefer_server_ciphers  on;
                        location / {
                            root   html;
                            index  index.html index.htm;
                        }
                    }

                3）重启nginx服务
 
                    /usr/local/nginx/sbin/nginx -s reload

                4) 验证

                    firefox https://www.c.com                  //信任证书后可以访问








构建LNMP平台:
 
                LNMP（Linux、Nginx、MySQL、PHP）
                在RHEL7系统中，源码安装Nginx，使用RPM包安装MariaDB、PHP、PHP-FPM软件。
                操作过程中需要安装的软件列表如下：
                nginx
                mariadb、mariadb-server、mariadb-devel
                php、php-fpm、php-mysql

                
         1）使用yum安装基础依赖包
               
                yum -y install gcc openssl-devel pcre-devel zlib-devel

         2）源码安装Nginx

                 useradd -s /sbin/nologin  nginx
                 tar -xvf nginx-1.12.2.tar.gz
                 cd nginx-1.12.2
                 ./configure   \
                 > --user=nginx   --group=nginx \
                 > --with-http_ssl_module
                 make && make install
                 .. ..
         3）安装MariaDB

                Mariadb在新版RHEL7光盘中包含有该软件，配置yum源后可以直接使用yum安装：
                yum -y install   mariadb   mariadb-server   mariadb-devel

         4）php和php-fpm

                yum -y  install  php   php-mysql
                yum -y  install php-fpm-5.4.16-42.el7.x86_64.rpm

         5)启动服务
                
                1.启动Nginx服务
                systemctl stop httpd                          //如果该服务存在则关闭该服务
                /usr/local/nginx/sbin/nginx                   //启动Nginx服务
                netstat -utnlp | grep :80
                tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         

                2.启动MySQL服务

                systemctl start  mariadb                      //启动服务器
                systemctl status mariadb                      //查看服务状态
                systemctl enable mariadb                      //设置开机启动

                3.启动PHP-FPM服务

                systemctl start php-fpm                       //启动服务
                systemctl status php-fpm                      //查看服务状态
                systemctl enable php-fpm                      //设置开机启动

                4.设置防火墙与SELinux

                firewall-cmd --set-default-zone=trusted
                setenforce 0

Nginx结合FastCGI技术即可支持PHP页面架构:
                
                注意，FastCGI的内存消耗问题，一个PHP-FPM解释器将消耗约25M的内存。
                
           1）查看php-fpm配置文件（实验中不需要修改该文件）

                vim /etc/php-fpm.d/www.conf

                [www]
                listen = 127.0.0.1:9000                 //PHP端口号
                pm.max_children = 32                    //最大进程数量
                pm.start_servers = 15                   //最小进程数量
                pm.min_spare_servers = 5                //最少需要几个空闲着的进程
                pm.max_spare_servers = 32               //最多允许几个进程处于空闲状态
             
           2) 修改Nginx配置文件并启动服务
                
                vim /usr/local/nginx/conf/nginx.conf
                location / {
                            root   html;
                            index  index.php  index.html   index.htm;       #设置默认首页为index.php
                        }
                 location  ~  \.php$  {
                            root           html;
                            fastcgi_pass   127.0.0.1:9000;  i   #将请求转发给本机9000端口，PHP解释器
                            fastcgi_index  index.php;
                            #fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                            include        fastcgi.conf;
                        }

                     /usr/local/nginx/sbin/nginx -s reload
           3) 创建PHP页面，测试LNMP架构能否解析PHP页面
                
                1.创建PHP测试页面

                vim /usr/local/nginx/html/test1.php
                <?php
                $i="This is a test Page";
                echo $i;
                ?>
              
                2.创建PHP测试页面,连接并查询MariaDB数据库。

                vim /usr/local/nginx/html/test2.php
                <?php
                $mysqli = new mysqli('localhost','root','密码','mysql');
                //注意：root为mysql账户名称，密码需要修改为实际mysql密码，无密码则留空即可
                if (mysqli_connect_errno()){
                    die('Unable to connect!'). mysqli_connect_error();
                }
                $sql = "select * from user";
                $result = $mysqli->query($sql);
                while($row = $result->fetch_array()){
                    printf("Host:%s",$row[0]);
                    printf("</br>");
                    printf("Name:%s",$row[1]);
                    printf("</br>");
                }
                ?>
                3.客户端使用浏览器访问服务器PHP首页文档，检验是否成功：

                firefox http://192.168.4.5/test1.php
                firefox http://192.168.4.5/test2.php

                4.LNMP常见问题

                Nginx的默认访问日志文件为/usr/local/nginx/logs/access.log
                Nginx的默认错误日志文件为/usr/local/nginx/logs/error.log
                PHP默认错误日志文件为/var/log/php-fpm/www-error.log
                如果动态网站访问失败，可用参考错误日志，查找错误信息。



地址重写
             
                
                nginx服务器的地址重写，主要用到的配置参数是rewrite：
                rewrite regex replacement flag
                rewrite 旧地址 新地址 [选项]
                
        1）修改Nginx服务配置：

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                server {
                        listen       80;
                        server_name  localhost;
                location / {
                    root   html;
                index  index.html index.htm;
                rewrite /a.html  /b.html;            
                }
                }
                echo "BB" > /usr/local/nginx/html/b.html

        2）重新加载配置文件

                /usr/local/nginx/sbin/nginx  -s  reload

        3）客户端测试
                firefox  http://192.168.4.5/a.html

    访问a.html重定向到b.html（跳转地址栏）
                
        1）修改Nginx服务配置：

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                server {
                        listen       80;
                        server_name  localhost;
                location / {
                    root   html;
                index  index.html index.htm;
                rewrite /a.html  /b.html  redirect;            
                }
                }

        2）重新加载配置文件

                /usr/local/nginx/sbin/nginx  -s  reload

        3）客户端测试（仔细观察浏览器地址栏的变化）
                firefox  http://192.168.4.5/a.html

修改配置文件(访问服务端的请求重定向至www.baidu.com)
                
        1) 修改Nginx服务配置

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                server {
                        listen       80;
                        server_name  localhost;
                rewrite ^/  http://www.baidu.com/;
                location / {
                    root   html;
                index  index.html index.htm;
                # rewrite /a.html  /b.html  redirect;
                }
                }

        2）重新加载配置文件

                /usr/local/nginx/sbin/nginx  -s  reload

        3）客户端测试
                firefox  http://192.168.4.5

修改配置文件(访问服务端/下面子页面，重定向至www.baidu.com/下相同的页面)
                
        1) 修改Nginx服务配置

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                server {
                        listen       80;
                        server_name  localhost;
                rewrite ^/(.*)$  https://baidu.com/$1
                location / {
                    root   html;
                index  index.html index.htm;
                # rewrite /a.html  /b.html  redirect;
                }
                }

        2）重新加载配置文件

                /usr/local/nginx/sbin/nginx  -s  reload

        3）客户端测试

                 firefox  http://192.168.4.5
                 firefox  http://192.168.4.5/index.php

修改配置文件(实现curl和火狐访问相同链接返回的页面不同)

        1) 创建网页目录以及对应的页面文件：

                echo "I am Normal page" > /usr/local/nginx/html/test.html
                mkdir  -p  /usr/local/nginx/html/firefox/
                echo "firefox page" > /usr/local/nginx/html/firefox/test.html

        2) 修改Nginx服务配置

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                server {
                        listen       80;
                        server_name  localhost;
                location / {
                    root   html;
                index  index.html index.htm;
                }
                #这里，~符号代表正则匹配，*符号代表不区分大小写
                if ($http_user_agent ~* firefox) {            //识别客户端firefox浏览器
                rewrite ^(.*)$ /firefox/$1;
                }
                }


        3）重新加载配置文件

                /usr/local/nginx/sbin/nginx  -s  reload

        4）客户端测试

                 firefox  http://192.168.4.5/test.html
                 curl     http://192.168.4.5/test.html

        5）地址重写格式【总结】

                rewrite 旧地址 新地址 [选项];
                last 不再读其他rewrite
                break 不再读其他语句，结束请求
                redirect 临时重定向(网络爬虫)
                permament 永久重定向(网络爬虫)


Nginx反向代理




         1）部署后端Web1,Web2服务器
                 详情见上；

         2）配置Nginx服务器，添加服务器池，实现反向代理功能
                
                1.修改/usr/local/nginx/conf/nginx.conf配置文件
                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                http {
                .. ..
                #使用upstream定义后端服务器集群，集群名称任意(如webserver)
                #使用server定义集群中的具体服务器和端口
                upstream webserver {
                                server 192.168.2.100:80;
                                server 192.168.2.200:80;
                        }
                .. ..
                server {
                        listen        80;
                        server_name  localhost;
                            location / {
                #通过proxy_pass将用户的请求转发给webserver集群
                            proxy_pass http://webserver;
                        }
                }

                2.重启nginx服务

                /usr/local/nginx/sbin/nginx -s reload

                3.客户端使用浏览器访问代理服务器测试轮询效果

                curl http://192.168.4.5            //使用该命令多次访问查看效果
                curl http://192.168.4.5            //使用该命令多次访问查看效果

配置upstream服务器集群池属性
                
         1）设置失败次数，超时时间，权重

                weight可以设置后台服务器的权重
                max_fails可以设置后台服务器的失败次数
                fail_timeout可以设置后台服务器的失败超时时间。

                vim /usr/local/nginx/conf/nginx.conf

                .. ..
                http {
                .. ..
                upstream webserver{
                           server 192.168.2.100:80 weight=1 max_fails=1 fail_timeout=30;
                           server 192.168.2.200:80 weight=2 max_fails=2 fail_timeout=30;
                           server 192.168.2.101:80 weight=1 max_fails=2 fail_timeout=30 down;
                       
                }
                #weight设置服务器权重值，默认值为1
                #max_fails设置最大失败次数
                #fail_timeout设置失败超时时间，单位为秒
                #down标记服务器已关机，不参与集群调度
                .. ..
                server {
                        listen        80;
                        server_name  localhost;
                            location / {
                            proxy_pass http://webserver;
                        }
                }

          2）重启nginx服务

                /usr/local/nginx/sbin/nginx -s reload

          3）关闭一台后端服务器（如web1）

             nginx -s stop

          4）客户端使用浏览器访问代理服务器测试轮询效果

                 curl http://192.168.4.5            //使用该命令多次访问查看效果

          5）再次启动后端服务器（如web1）

             nginx 

          6）客户端再次使用浏览器访问代理服务器测试轮询效果

                 curl http://192.168.4.5            //使用该命令多次访问查看效果

配置upstream服务器集群的调度算法
                
          1）设置相同客户端访问相同Web服务器

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                http {
                .. ..
                upstream webserver {
                #通过ip_hash设置调度规则为：相同客户端访问相同服务器
                                ip_hash;
                                server 192.168.2.100 weight=1 max_fails=2 fail_timeout=10;
                                server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;
                        }
                .. ..
                server {
                        listen        80;
                        server_name  www.tarena.com;
                            location / {
                            proxy_pass http://webserver;
                        }
                }

         2）重启nginx服务

                /usr/local/nginx/sbin/nginx -s reload

         3）客户端使用浏览器访问代理服务器测试轮询效果

                curl http://192.168.4.5            //使用该命令多次访问查看效果
Nginx的TCP/UDP调度器
                
                使用Nginx实现TCP/UDP调度器功能，实现如下功能：
                后端MADIADB服务器两台
                Nginx编译安装时需要使用--with-stream，开启ngx_stream_core_module模块
                Nginx采用轮询的方式调用后端MARIADB服务器
                
                
                
部署支持4层TCP/UDP代理的Nginx服务器
                
         1）部署nginx服务器和后端服务器

                1.编译安装必须要使用--with-stream参数开启4层代理模块。
                ... ...
                ./configure  --with-stream    ......        //开启4层反向代理功能
                ... ...
          
                2.部署后端服务器
  
                yum -y install mariadb mariadb-server
   
                systemctl restart mariadb
  
                mysql
  
                grant all on *.* to tom@'%' identified by "123456";

         2) 配置Nginx服务器，添加服务器池，实现TCP/UDP反向代理功能
                 
                1.修改/usr/local/nginx/conf/nginx.conf配置文件
                vim /usr/local/nginx/conf/nginx.conf
                http {
                .. ..
                }
                stream { 
                             upstream backend {
                                server 192.168.2.100:3306;        //后端MARIADB服务器IP和端口
                                server 192.168.2.200:3306;         
                }   
                             server {
                                listen   12345;
                                proxy_connect_timeout 1s;
                                proxy_timeout 3s;
                                proxy_pass backend;   
                             }
                }

                2.重启nginx服务

                /usr/local/nginx/sbin/nginx -s reload

                3）客户端使用访问代理服务器测试轮询效果
            
                yum -y install mariadb
         
                mysql -h 192.168.4.5 -P 12345 -user tom  -p123           //使用该命令多次访问查看效果

Nginx常见问题处理
                
                本案例要求对Nginx服务器进行适当优化，解决如下问题，以提升服务器的处理性能：
                如果客户端访问服务器提示“Too many open files”如何解决
                如何解决客户端访问头部信息过长的问题
                如何让客户端浏览器缓存数据
                如何自定义返回给客户端的404错误页面
                如何查看服务器状态信息
                开启gzip压缩功能，提高数据传输效率
                开启文件缓存功能
                然后客户机访问此Web服务器验证效果：
                使用ab压力测试软件测试并发量
                编写测试脚本生成长头部信息的访问请求
                客户端访问不存在的页面，测试404错误页面是否重定向
                
         1）启用Nginx服务并查看监听端口状态

                ss命令可以查看系统中启动的端口信息，该命令常用选项如下：
                -a显示所有端口的信息
                -n以数字格式显示端口号
                -t显示TCP连接的端口
                -u显示UDP连接的端口
                -l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
                -p显示监听端口的服务名称是什么（也就是程序名称）
                 注意：在RHEL7系统中可以使用ss命令替代netstat命令，功能一样，选项一样。

                /usr/local/nginx/sbin/nginx

                netstat  -anptu  |  grep nginx
                tcp        0        0 0.0.0.0:80        0.0.0.0:*        LISTEN        10441/nginx

                ss  -anptu  |  grep nginx

                步骤二：优化Nginx并发量
                
         2）优化前使用ab高并发测试
                ab -n 2000 -c 2000 http://192.168.4.5/

                socket: Too many open files (24)                //提示打开文件数量过多

         2）修改Nginx配置文件，增加并发量

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                worker_processes  2;                           //与CPU核心数量一致
                events {
                worker_connections 65535;                      //每个worker最大并发连接数
                use epoll;
                }
                .. ..
                nginx -s reload

         3）优化Linux内核参数（最大文件数量）

                ulimit -a                                      //查看所有属性值
                ulimit -Hn 65535                               //设置硬限制（临时规则）
                ulimit -Sn 165535                              //设置软限制（临时规则）
                vim /etc/security/limits.conf                  //修改配置文件（永久生效）
                    .. ..
                    *            soft            nofile         65535
                    *            hard            nofile         65535
                用户或组    硬限制或软限制    需要限制的项目   限制的值

          4）优化后测试服务器并发量

                ab -n 2000 -c 2000 http://192.168.4.5/
                
优化Nginx数据包头缓存
                
          1）优化前，使用脚本测试长头部请求是否能获得响应
                cat lnmp_soft/buffer.sh 
                #!/bin/bash
                URL=http://192.168.4.5/index.html?
                for i in {1..5000}
                do
                    URL=${URL}v$i=$i
                done
                curl $URL                                //经过5000次循环后，生成一个长的URL地址栏
                ./buffer.sh
                .. ..
                <center><h1>414 Request-URI Too Large</h1></center>        //提示头部信息过大

          2）修改Nginx配置文件，增加数据包头部缓存大小

                vim /usr/local/nginx/conf/nginx.conf
                .. ..
                http {
                client_header_buffer_size    1k;         //默认请求包头信息的缓存    
                large_client_header_buffers  4 4k;       //大请求包头部信息的缓存个数与容量
                .. ..
                }
                nginx -s reload

          3）优化后，使用脚本测试长头部请求是否能获得响应

                ./buffer.sh

浏览器本地缓存静态数据
                
          1）使用Firefox浏览器查看缓存

                以Firefox浏览器为例，在Firefox地址栏内输入about:cache将显示Firefox浏览器的缓存信息，如图-3所示，点击List Cache Entries可以查看详细信息。
                
          2）清空firefox本地缓存数据。
                
                
          3）修改Nginx配置文件，定义对静态页面的缓存时间

                vim /usr/local/nginx/conf/nginx.conf
                server {
                        listen       80;
                        server_name  localhost;
                        location / {
                            root   html;
                            index  index.html index.htm;
                        }
                location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
                expires        30d;            //定义客户端缓存时间为30天
                }
                }
                cp /usr/share/backgrounds/day.jpg /usr/local/nginx/html
                nginx -s reload

         4）优化后，使用Firefox浏览器访问图片，再次查看缓存信息

                firefox http://192.168.4.5/day.jpg
                
                在Firefox地址栏内输入about:cache，查看本地缓存数据，查看是否有图片以及过期时间

自定义报错页面
                
         1）优化前，客户端使用浏览器访问不存在的页面，会提示404文件未找到

               firefox http://192.168.4.5/xxxxx                         //访问一个不存在的页面

         2）修改Nginx配置文件，自定义报错页面

                vim /usr/local/nginx/conf/nginx.conf

                .. ..
                error_page   404  /40x.html;                            //自定义错误页面
                .. ..
                vim /usr/local/nginx/html/40x.html                      //生成错误页面
                Oops,No NO no page …

                nginx -s reload

         3）优化后，客户端使用浏览器访问不存在的页面，会提示自己定义的40x.html页面

                firefox http://192.168.4.5/xxxxx                        //访问一个不存在的页面

         4）常见http状态码
  
                 状态码     功能描述
               
                   200      一切正常
                   301      永久重定向
                   302      临时重定向
                   401      用户名或密码错误
                   403      禁止访问（客户端ip地址被拒绝）
                   404      文件不存在
                   414      请求URL头部过长
                   500      服务器内部错误
                   502      Bad Gateway(错误网关)
                
如何查看服务器状态信息，关闭版本号
                
         1）编译安装时使用--with-http_stub_status_module开启状态页面模块

                ./configure  --with-http_stub_status_module           //开启status状态页面

         2）修改Nginx配置文件，定义状态页面

                cat /usr/local/nginx/conf/nginx.conf
                … …
                location /status {
                                stub_status on;
                        }
                … …
                nginx

                http {
                ... ...
                server_tokens off;                                   //关闭版本号
                ... ... 
                }
         2）优化后，查看状态页面信息

                curl  http://192.168.4.5/status
                Active connections: 1 
                server accepts handled requests
                 10 10 3 
                Reading: 0 Writing: 1 Waiting: 0
                Active connections：当前活动的连接数量。
                Accepts：已经接受客户端的连接总数量。
                Handled：已经处理客户端的连接总数量（一般与accepts一致，除非服务器限制了连接数量）。
                Requests：客户端发送的请求数量。
                Reading：当前服务器正在读取客户端请求头的数量。
                Writing：当前服务器正在写响应信息的数量。
                Waiting：当前多少客户端在等待服务器的响应。
对页面进行压缩处理
                
         1）修改Nginx配置文件
                cat /usr/local/nginx/conf/nginx.conf
                http {
                .. ..
                gzip on;                             //开启压缩
                gzip_min_length 1000;                //小文件不压缩
                gzip_comp_level 4;                   //压缩比率
                gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                                     //对特定文件压缩，类型参考mime.types
                .. ..
                }

服务器内存缓存
                
                1）如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快。

                http { 
                open_file_cache          max=2000  inactive=20s;
                        open_file_cache_valid    60s;
                        open_file_cache_min_uses 5;
                        open_file_cache_errors   off;
                //设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
                //文件句柄的有效时间是60秒，60秒后过期
                //只有访问次数超过5次会被缓存
                } 



Memcached
memcached是高性能的分布式缓存服务器，用来集中缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的响应速度。访问拓扑如图-1所示。

图-1
使用1台RHEL7虚拟机作为memcached服务器（192.168.4.5）。
在RHEL7系统光盘中包含有memcached，因此需要提前配置yum源，即可直接使用yum安装，客户端测试时需要提前安装telnet远程工具。
验证时需要客户端主机安装telnet，远程memcached来验证服务器的功能：
add name 0 180 10	//变量不存在则添加
set name 0 180 10	//添加或替换变量
replace name 0 180 10	//替换
get name	//读取变量
append name 0 180 10	//向变量中追加数据
delete name	//删除变量
stats	//查看状态
flush_all	//清空所有
提示：0表示不压缩，180为数据缓存时间，10为需要存储的数据字节数量。
1.3 步骤

实现此案例需要按照如下步骤进行。
步骤一：构建memcached服务

1）使用yum安装软件包memcached
[root@proxy ~]# yum -y  install   memcached
[root@proxy ~]# rpm -qa memcached
memcached-1.4.15-10.el7_3.1.x86_64
2) memcached配置文件（查看即可，不需要修改）
[root@proxy ~]# vim /usr/lib/systemd/system/memcached.service
ExecStart=/usr/bin/memcached -u $USER -p $PORT -m $CACHESIZE -c $MAXCONN $OPTIONS
[root@proxy ~]# vim /etc/sysconfig/memcached
PORT="11211"
USER="memcached"
MAXCONN="1024"
CACHESIZE="64"
OPTIONS=""
3）启动服务并查看网络连接状态验证是否开启成功：
netstat命令可以查看系统中启动的端口信息，该命令常用选项如下：
-a显示所有端口的信息
-n以数字格式显示端口号
-t显示TCP连接的端口
-u显示UDP连接的端口
-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
-p显示监听端口的服务名称是什么（也就是程序名称）
注意：在RHEL7系统中，使用ss命令可以替代netstat，功能与选项一样。
[root@proxy ~]# systemctl  start  memcached
[root@proxy ~]# systemctl  status  memcached
[root@proxy ~]# netstat  -anptu  |  grep memcached
tcp    0    0 0.0.0.0:11211        0.0.0.0:*        LISTEN        2839/memcached      
tcp    0    0 :::11211            :::*                LISTEN        2839/memcached      
udp    0    0 0.0.0.0:11211        0.0.0.0:*                    2839/memcached      
udp    0    0 :::11211            :::*                            2839/memcached
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤二：使用telnet访问memcached服务器

1）使用yum安装telnet
[root@proxy ~]# yum -y install telnet
2)使用telnet连接服务器测试memcached服务器功能，包括增、删、改、查等操作。
[root@proxy ~]# telnet  192.168.4.5  11211
Trying 192.168.4.5...
……
##提示：0表示不压缩，180为数据缓存时间，3为需要存储的数据字节数量。
set name 0 180 3                //定义变量，变量名称为name
plj                            //输入变量的值，值为plj                
STORED
get name                        //获取变量的值
VALUE name 0 3                 //输出结果
plj
END
##提示：0表示不压缩，180为数据缓存时间，3为需要存储的数据字节数量。
add myname 0 180 10            //新建，myname不存在则添加，存在则报错
set myname 0 180 10            //添加或替换变量
replace myname 0 180 10        //替换，如果myname不存在则报错
get myname                    //读取变量
append myname 0 180 10        //向变量中追加数据
delete myname                    //删除变量
stats                        //查看状态
flush_all                        //清空所有
quit                            //退出登录                                  
2 案例2：LNMP+memcached
2.1 问题

沿用练习一，部署LNMP+memcached网站平台,通过PHP页面实现对memcached服务器的数据操作，实现以下目标：
部署LNMP实现PHP动态网站架构
为PHP安装memcache扩展
创建PHP页面，并编写PHP代码，实现对memcached的数据操作
2.2 方案

使用2台RHEL7虚拟机，其中一台作为memcached及LNMP服务器（192.168.4.5）、另外一台作为测试用的Linux客户机（192.168.4.100），如图-1所示。

图-1
在RHEL7系统光盘中包含有我们需要的MariaDB、PHP，我们需要使用源码安装Nginx，使用RPM包安装FPM。另外如果希望使用PHP来操作memcached，注意必须要为PHP安装memcache扩展（php-pecl-memcache），否则PHP无法解析连接memcached的指令。客户端测试时需要提前安装telnet远程工具。
2.3 步骤

实现此案例需要按照如下步骤进行。
步骤一：部署LNMP环境（如果环境中已经存在LNMP环境本步骤可以忽略）

1）使用yum安装基础依赖包
[root@proxy ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel
.. ..
2）源码安装Nginx
[root@proxy ~]# tar -xf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]#  ./configure   \
> --with-http_ssl_module 
[root@proxy nginx-1.12.2]# make && make install
3）安装MariaDB数据库
[root@proxy ~]# yum -y install  mariadb  mariadb-server  mariadb-devel
4）安装PHP
[root@proxy ~]# yum -y install  php  php-mysql
[root@proxy ~]# yum -y install  php-fpm-5.4.16-42.el7.x86_64.rpm
5）修改Nginx配置文件
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
           # fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
步骤二：启动服务（如果所有服务已经启动，也可以忽略这一步骤）

1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
[root@proxy ~]# systemctl stop  httpd                //如果该服务存在，则关闭该服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx
[root@proxy ~]# netstat -utnlp | grep :80
tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         
2）启动MySQL服务
[root@proxy ~]# systemctl start mariadb
[root@proxy ~]# systemctl status mariadb
3）启动PHP-FPM服务
[root@proxy ~]# systemctl start php-fpm
[root@proxy ~]# systemctl status php-fpm
4）关闭SELinux、防火墙
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤三：创建PHP页面，使用PHP语言测试memcached服务

1）部署测试页面
创建PHP首页文档/usr/local/nginx/html/index.php，测试页面可以参考lnmp_soft/php_scripts/mem.php：
 [root@proxy ~]# vim /usr/local/nginx/html/test.php
<?php
$memcache=new Memcache;                //创建memcache对象
$memcache->connect('localhost',11211) or die ('could not connect!!');
$memcache->set('key','test');             //定义变量
$get_values=$memcache->get('key');        //获取变量值
echo $get_values;
?>
2）客户端测试（结果会失败）
客户端使用浏览器访问服务器PHP首页文档，检验对memcached的操作是否成功：
[root@client ~]# firefox http://192.168.4.5/test.php
注意：这里因为没有给PHP安装扩展包，默认PHP无法连接memcached数据库，需要给PHP安装扩展模块才可以连接memcached数据库。
3）为PHP添加memcache扩展
[root@proxy ~]# yum -y install  php-pecl-memcache
[root@proxy ~]# systemctl restart php-fpm
4）客户端再次测试（结果会成功显示数据结果）
[root@client ~]# firefox http://192.168.4.5/test.php
3 案例3：PHP的本地Session信息
3.1 问题

通过Nginx调度器负载后端两台Web服务器，实现以下目标：
部署Nginx为前台调度服务器
调度算法设置为轮询
后端为两台LNMP服务器
部署测试页面，查看PHP本地的Session信息
3.2 方案

使用4台RHEL7虚拟机，其中一台作为Nginx前端调度器服务器（eth0:192.168.4.5,eth1:192.168.2.5）、两台虚拟机部署为LNMP服务器，分别为Web1服务器（192.168.2.100）和Web2服务器（192.168.2.200），另外一台作为测试用的Linux客户机（192.168.4.100），拓扑如图-2所示。

图-2
3.3 步骤

实现此案例需要按照如下步骤进行。
步骤一：部署后端LNMP服务器相关软件

注意:以下部署LNMP服务器的操作，需要在两台后端服务器做相同的操作，下面我们以一台Web1服务器（192.168.2.100）为例，对Web2服务器执行相同操作即可。
1）使用yum安装基础依赖包
[root@web1 ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel
.. ..
2）源码安装Nginx
[root@web1 ~]# tar -xf nginx-1.12.2.tar.gz
[root@web1 ~]# cd nginx-1.12.2
[root@web1 nginx-1.12.2]#  ./configure   \
> --with-http_ssl_module 
[root@web1 nginx-1.12.2]# make && make install
3）安装MariaDB数据库
[root@web1 ~]# yum -y install  mariadb  mariadb-server  mariadb-devel
4）安装PHP（php-fpm软件包在lnmp_soft中有提供）
[root@web1 ~]# yum -y install  php  php-mysql
[root@web1 ~]# yum -y install  php-fpm-5.4.16-42.el7.x86_64.rpm
5）修改Nginx配置文件（修改默认首页与动静分离）
[root@web1 ~]# vim /usr/local/nginx/conf/nginx.conf
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
           # fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
步骤二：启动LNMP服务器相关的服务

1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
[root@web1 ~]# systemctl stop  httpd                //如果该服务存在，则关闭该服务
[root@web1 ~]# /usr/local/nginx/sbin/nginx
[root@web1 ~]# netstat -utnlp | grep :80
tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         
2）启动MySQL服务
[root@web1 ~]# systemctl start mariadb
[root@web1 ~]# systemctl status mariadb
3）启动PHP-FPM服务
[root@web1 ~]# systemctl start  php-fpm
[root@web1 ~]# systemctl status php-fpm
4）关闭SELinux、防火墙
[root@web1 ~]# setenforce 0
[root@web1 ~]# firewall-cmd --set-default-zone=trusted
步骤三：部署前端Nginx调度服务器

1）使用源码安装nginx软件（如果Nginx软件包已存在可以忽略此步骤）
[root@proxy ~]# yum  -y  install   pcre-devel openssl-devel
[root@proxy ~]# tar -xf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure
[root@proxy nginx-1.12.2]# make && make install
2）修改Nginx配置文件
Nginx配置文件中，通过upstream定义后端服务器地址池，默认调度策略为轮询，使用proxy_pass调用upstream定义的服务器地址池：
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
upstream webs  {
        server 192.168.2.100:80;
        server 192.168.2.200:80;
  }
 server  {
          listen       80;
          server_name  localhost;
          location  /  {
              proxy_pass http://webs;
            root   html;
            index  index.php index.html index.htm;
          }
}
3）重新加载配置文件

[root@proxy ~]# /usr/local/nginx/sbin/nginx -s reload
#请先确保nginx是启动状态才可以执行命令成功，否则报错,报错信息如下：
#[error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)
4）关闭SELinux、防火墙
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤四：测试环境是否配置成功

1）浏览器访问测试页面验证。
[root@client ~]# curl  http://192.168.4.5/index.html        //查看是否有数据
步骤五：部署测试页面

1）部署测试页面(Web1服务器）。
测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz。
[root@web1 ~]# cd lnmp_soft/php_scripts/
[root@web1 php_scripts]# tar -xf php-memcached-demo.tar.gz
[root@web1 php_scripts]# cd php-memcached-demo
[root@web1 php-memcached-demo]# cp -a  *  /usr/local/nginx/html/
2）浏览器直接访问后端服务器的测试页面（Web1服务器）。
[root@web1 ~]# firefox http://192.168.2.100            //填写账户信息
[root@web1 ~]# cd /var/lib/php/session/            //查看服务器本地的Session信息
[root@web1 ~]# ls
sess_ahilcq9bguot0vqsjtd84k7244                        //注意这里的ID是随机的
[root@web1 ~]# cat sess_ahilcq9bguot0vqsjtd84k7244
注意：可用修改index.php和home.php两个文件的内容，添加页面颜色属性，以区别后端两台不同的服务器:<body bgcolor=blue>。
3）部署测试页面(Web2服务器）。
测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz。
[root@web2 ~]# cd lnmp_soft/php_scripts/
[root@web2 php_scripts]# tar -xf php-memcached-demo.tar.gz
[root@web2 php_scripts]# cd php-memcached-demo
[root@web2 php-memcached-demo]# cp -a  *  /usr/local/nginx/html/
4）浏览器直接访问后端服务器的测试页面（Web2服务器）。
[root@web2 ~]# firefox http://192.168.2.100             //填写账户信息
[root@web2 ~]# cd /var/lib/php/session/            //查看服务器本地的Session信息
[root@web2 ~]# ls
sess_qqek1tmel07br8f63d6v9ch401                        //注意这里的ID是随机的
[root@web2 ~]# cat sess_qqek1tmel07br8f63d6v9ch401    
注意：可用修改index.php和home.php两个文件的内容，添加页面颜色属性，以区别后端两台不同的服务器:<body bgcolor=green>。
5）浏览器访问前端调度器测试（不同后端服务器Session不一致）。
推荐使用google浏览器测试。
[root@client ~]# google-chrome http://192.168.4.5
//填写注册信息后，刷新，还需要再次注册，说明两台计算机使用的是本地Session
//第二台主机并不知道你再第一台主机已经登录，第一台主机的登录信息也没有传递给第二台主机
4 案例4：PHP实现session共享
4.1 问题

沿用练习三，通过修改PHP-FPM配置文件，实现session会话共享，本案例需要在练习三的基础上实现：
配置PHP使用memcached服务器共享Session信息
客户端访问两台不同的后端Web服务器时，Session 信息一致
4.2 方案

在练习三拓扑的基础上，Nginx服务器除了承担调度器外，还需要担任memcached数据库的角色，并在两台后端LNMP服务器上实现PHP的session会话共享。拓扑结构如图-4所示。

图-4
4.3 步骤

实现此案例需要按照如下步骤进行。
步骤一：构建memcached服务

1）安装Memcached服务（如果192.168.4.5上已经有本软件包，此步骤可以忽略）
[root@proxy ~]# yum -y install memcached
2）启动服务并查看网络连接状态验证是否开启成功：
[root@proxy ~]# systemctl restart memcached
[root@proxy ~]# netstat  -anptu  |  grep memcached
tcp    0    0 0.0.0.0:11211        0.0.0.0:*        LISTEN        2839/memcached      
tcp    0    0 :::11211            :::*                LISTEN        2839/memcached      
udp    0    0 0.0.0.0:11211        0.0.0.0:*                    2839/memcached      
udp    0    0 :::11211            :::*                            2839/memcached
3）关闭SELinux、防火墙
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤二：在后端LNMP服务器上部署Session共享

注意：这些操作在两台后端Web服务器上均需要执行，以下操作以Web1（192.168.2.100）服务器为例。
1）为PHP添加memcache扩展
注意，因为后端两台web服务器(web1,web2)都需要连接memcached数据库，所以两台主机都需要安装PHP扩展模块(下面也web1为例)。
[root@web1 ~]# yum -y install  php-pecl-memcache
2）修改PHP-FPM配置文件，并重启服务
注意，因为后端两台web服务器(web1,web2)都需要修改配置文件(下面也web1为例)。
[root@web1 ~]# vim  /etc/php-fpm.d/www.conf            //修改该配置文件的两个参数
//文件的最后2行
修改前效果如下:
php_value[session.save_handler] = files
php_value[session.save_path] = /var/lib/php/session
//原始文件，默认定义Sessoin会话信息本地计算机（默认在/var/lib/php/session）
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
修改后效果如下:
php_value[session.save_handler] = memcache
php_value[session.save_path] = "tcp://192.168.2.5:11211"
//定义Session信息存储在公共的memcached服务器上，主机参数中为memcache（没有d）
//通过path参数定义公共的memcached服务器在哪（服务器的IP和端口）
[root@web1 ~]# systemctl  restart  php-fpm
步骤三：客户端测试

客户端使用浏览器访问两台不同的Web服务器。
操作步骤与练习三一致，最终可以获得相关的Session ID信息。



